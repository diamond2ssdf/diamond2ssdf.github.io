<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构[Python版]</title>
      <link href="/2025/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Python%E7%89%88/"/>
      <url>/2025/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-Python%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-双向链表"><a href="#1-双向链表" class="headerlink" title="1. 双向链表"></a>1. 双向链表</h2><ul><li>双向遍历</li><li>插入&#x2F;删除操作高效</li></ul><p>插入时间复杂度O(1)，给定Node删除时间复杂度为O(1)，查询复杂度O(n)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, value=None):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.prev = None</span><br><span class="line">        self.next = None</span><br><span class="line"></span><br><span class="line">class DoublyLinkedList:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        # 初始化头尾虚拟节点并互连</span><br><span class="line">        self.dummy_head = Node()  </span><br><span class="line">        self.dummy_tail = Node()  </span><br><span class="line">        self.dummy_head.next = self.dummy_tail</span><br><span class="line">        self.dummy_tail.prev = self.dummy_head</span><br><span class="line">        self.size = 0  # 实际节点数量，不计虚拟节点</span><br><span class="line"></span><br><span class="line">    def _insert_between(self, prev_node, next_node, value):</span><br><span class="line">        &quot;&quot;&quot;在prev_node和next_node之间插入新节点&quot;&quot;&quot;</span><br><span class="line">        new_node = Node(value)</span><br><span class="line">        new_node.prev = prev_node</span><br><span class="line">        new_node.next = next_node</span><br><span class="line">        prev_node.next = new_node</span><br><span class="line">        next_node.prev = new_node</span><br><span class="line">        self.size += 1</span><br><span class="line">        return new_node</span><br><span class="line"></span><br><span class="line">    def append_left(self, value):</span><br><span class="line">        &quot;&quot;&quot;在链表头部插入（dummy_head后）&quot;&quot;&quot;</span><br><span class="line">        self._insert_between(self.dummy_head, self.dummy_head.next, value)</span><br><span class="line"></span><br><span class="line">    def append_right(self, value):</span><br><span class="line">        &quot;&quot;&quot;在链表尾部插入（dummy_tail前）&quot;&quot;&quot;</span><br><span class="line">        self._insert_between(self.dummy_tail.prev, self.dummy_tail, value)</span><br><span class="line"></span><br><span class="line">    def remove(self, value):</span><br><span class="line">        &quot;&quot;&quot;删除第一个匹配值的节点&quot;&quot;&quot;</span><br><span class="line">        current = self.dummy_head.next</span><br><span class="line">        while current != self.dummy_tail:</span><br><span class="line">            if current.value == value:</span><br><span class="line">                # 断开当前节点连接</span><br><span class="line">                current.prev.next = current.next</span><br><span class="line">                current.next.prev = current.prev</span><br><span class="line">                self.size -= 1</span><br><span class="line">                return True</span><br><span class="line">            current = current.next</span><br><span class="line">        return False</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        &quot;&quot;&quot;可视化链表结构&quot;&quot;&quot;</span><br><span class="line">        res = []</span><br><span class="line">        current = self.dummy_head.next</span><br><span class="line">        while current != self.dummy_tail:</span><br><span class="line">            res.append(str(current.value))</span><br><span class="line">            current = current.next</span><br><span class="line">        return &quot; &lt;-&gt; &quot;.join(res) if res else &quot;Empty List&quot;</span><br></pre></td></tr></table></figure><p>例题：</p><ul><li>LRU缓存 <a href="https://leetcode.cn/problems/lru-cache/description/">146. LRU 缓存 - 力扣（LeetCode）</a></li></ul><h2 id="2-单调栈"><a href="#2-单调栈" class="headerlink" title="2. 单调栈"></a>2. 单调栈</h2><p>寻找下一个更大&#x2F;更小元素</p><ul><li>构造一个递减栈，如果当前元素大于stk[-1]， 弹出栈顶，用于寻找下一个更大的元素</li><li>构造一个递增栈，如果当前元素小于stk[-1]， 弹出栈顶，用于寻找下一个更小的元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 递减单调栈</span><br><span class="line">def next_greater_element(nums):</span><br><span class="line">    stack = []</span><br><span class="line">    result = [-1] * len(nums)</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        while stack and nums[i] &gt; nums[stack[-1]]:</span><br><span class="line">            idx = stack.pop()</span><br><span class="line">            result[idx] = nums[i]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure><p><strong>例题</strong>：</p><ul><li>每日温度问题 <a href="https://leetcode.cn/problems/daily-temperatures/description/">739. 每日温度 - 力扣（LeetCode）</a></li><li>柱状图最大矩形 <a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/description/">84. 柱状图中最大的矩形 - 力扣（LeetCode）</a></li></ul><h2 id="3-单调队列"><a href="#3-单调队列" class="headerlink" title="3. 单调队列"></a>3. 单调队列</h2><p>O(1)获得滑动窗口最值</p><p>以滑动窗口最大值为例：</p><ul><li>“又老又小”的值是没用的，维护一个递减队列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line">class MonotonicQueue:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.q = deque()</span><br><span class="line">    </span><br><span class="line">    def push(self, n):</span><br><span class="line">        while self.q and self.q[-1] &lt; n:</span><br><span class="line">            self.q.pop()</span><br><span class="line">        self.q.append(n)</span><br><span class="line">    </span><br><span class="line">    def max(self):</span><br><span class="line">        return self.q[0]</span><br><span class="line">    </span><br><span class="line">    def pop(self, n):</span><br><span class="line">        if self.q[0] == n:</span><br><span class="line">            self.q.popleft()</span><br><span class="line"></span><br><span class="line"># 滑动窗口最大值示例</span><br><span class="line">def max_sliding_window(nums, k):</span><br><span class="line">    window = MonotonicQueue()</span><br><span class="line">    res = []</span><br><span class="line">    for i in range(len(nums)):</span><br><span class="line">        if i &lt; k-1:</span><br><span class="line">            window.push(nums[i])</span><br><span class="line">        else:</span><br><span class="line">            window.push(nums[i])</span><br><span class="line">            res.append(window.max())</span><br><span class="line">            window.pop(nums[i-k+1])</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure><p><strong>例题</strong>：</p><ul><li><a href="https://leetcode.cn/problems/sliding-window-maximum/description/?envType=problem-list-v2&envId=monotonic-queue">239. 滑动窗口最大值 - 力扣（LeetCode）</a></li></ul><h2 id="4-树"><a href="#4-树" class="headerlink" title="4 树"></a>4 树</h2><h3 id="4-1-二叉搜索树"><a href="#4-1-二叉搜索树" class="headerlink" title="4.1 二叉搜索树"></a>4.1 二叉搜索树</h3><p>在最优情况下（树接近完全二叉树），插入、删除和查找操作的时间复杂度为O(log n)</p><ul><li><p>节点排序性质</p><ul><li><p>若左子树不为空，则左子树上所有节点的值都小于根节点的值。</p></li><li><p>若右子树不为空，则右子树上所有节点的值都大于根节点的值。</p></li><li><p>左右子树也必须是二叉搜索树</p></li></ul></li></ul><ul><li>对二叉搜索树进行中序遍历（左-根-右），得到的节点值序列是单调递增的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class TreeNode:</span><br><span class="line">    def __init__(self, val):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">class BST:</span><br><span class="line">    def insert(self, root, val):</span><br><span class="line">        if not root:</span><br><span class="line">            return TreeNode(val)</span><br><span class="line">        if val &lt; root.val:</span><br><span class="line">            root.left = self.insert(root.left, val)</span><br><span class="line">        else:</span><br><span class="line">            root.right = self.insert(root.right, val)</span><br><span class="line">        return root</span><br><span class="line">    </span><br><span class="line">    def search(self, root, val):</span><br><span class="line">        if not root:</span><br><span class="line">            return False</span><br><span class="line">        if root.val == val:</span><br><span class="line">            return True</span><br><span class="line">        elif val &lt; root.val:</span><br><span class="line">            return self.search(root.left, val)</span><br><span class="line">        else:</span><br><span class="line">            return self.search(root.right, val)</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><ul><li><a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">98. 验证二叉搜索树 - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/delete-node-in-a-bst/description/">450. 删除二叉搜索树中的节点 - 力扣（LeetCode）</a></li></ul><h3 id="4-2-前缀树"><a href="#4-2-前缀树" class="headerlink" title="4.2 前缀树"></a>4.2 前缀树</h3><ul><li><p>用于高效存储和检索字符串集合中的键。</p></li><li><p>它的每个节点代表一个字符，从根节点到某一节点的路径表示一个字符串</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class TrieNode:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">        self.is_end = False</span><br><span class="line"></span><br><span class="line">class Trie:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">    </span><br><span class="line">    def insert(self, word):</span><br><span class="line">        node = self.root</span><br><span class="line">        for char in word:</span><br><span class="line">            if char not in node.children:</span><br><span class="line">                node.children[char] = TrieNode()</span><br><span class="line">            node = node.children[char]</span><br><span class="line">        node.is_end = True</span><br><span class="line">    </span><br><span class="line">    def search(self, word):</span><br><span class="line">        node = self.root</span><br><span class="line">        for char in word:</span><br><span class="line">            if char not in node.children:</span><br><span class="line">                return False</span><br><span class="line">            node = node.children[char]</span><br><span class="line">        return node.is_end</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><ul><li><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/description/?envType=study-plan-v2&envId=leetcode-75">208. 实现 Trie (前缀树) - 力扣（LeetCode）</a></li><li><a href="https://leetcode.cn/problems/design-add-and-search-words-data-structure/description/">211. 添加与搜索单词 - 数据结构设计 - 力扣（LeetCode）</a></li></ul><h3 id="4-3-B-树"><a href="#4-3-B-树" class="headerlink" title="4.3 B+树"></a>4.3 B+树</h3><p><strong>特性</strong>：</p><ul><li>多路平衡搜索树</li><li>所有数据存储在叶子节点</li><li>叶子节点形成有序链表</li></ul><p><strong>应用</strong>：</p><ul><li>数据库索引</li><li>文件系统</li></ul><h3 id="4-4-红黑树"><a href="#4-4-红黑树" class="headerlink" title="4.4 红黑树"></a>4.4 红黑树</h3><p><strong>特性</strong>：</p><ol><li>节点是红色或黑色</li><li>根节点是黑色</li><li>叶子节点（NIL）是黑色</li><li>红色节点的子节点都是黑色</li><li>任意路径黑节点数量相同</li></ol><p><strong>应用</strong>：</p><ul><li>Linux进程调度</li></ul><h2 id="5-堆"><a href="#5-堆" class="headerlink" title="5. 堆"></a>5. 堆</h2><p><strong>堆</strong>是一种特殊的完全二叉树结构，可以理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强，当我们只关心所有数据中的最大值或者最小值，存在多次获取最大值或者最小值，多次插入或删除数据时，就可以使用堆，</p><p>满足以下性质：</p><ul><li><strong>最小堆</strong>：每个节点的值 ≤ 子节点的值</li><li><strong>最大堆</strong>：每个节点的值 ≥ 子节点的值</li></ul><p><strong>核心特征</strong>：</p><ul><li>堆顶元素始终为极值（最小值或最大值）</li><li>插入&#x2F;删除时间复杂度为 O(log n)</li><li>完全二叉树结构（可用数组高效存储）</li></ul><p><strong>手码最小堆</strong></p><ul><li><strong>插入</strong>：将一个新元素插入堆中，同时保持堆的性质。<ul><li>放入列表尾部</li><li>上浮</li></ul></li><li><strong>删除</strong>：移除并返回堆顶元素<ul><li>最后一个值放到堆顶</li><li>下沉</li></ul></li></ul><p><strong>heapq实现堆</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import heapq</span><br><span class="line"></span><br><span class="line"># 最小堆</span><br><span class="line">heap = []</span><br><span class="line">heapq.heappush(heap, 3)</span><br><span class="line">heapq.heappop(heap)</span><br><span class="line"></span><br><span class="line"># 最大堆实现</span><br><span class="line">nums = [3, 1, 4]</span><br><span class="line">heapq.heapify([-x for x in nums])</span><br><span class="line">max_val = -heapq.heappop(nums)</span><br></pre></td></tr></table></figure><p><strong>例题</strong></p><ul><li><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">347. 前 K 个高频元素 - 力扣（LeetCode）</a></p></li><li><p><a href="https://leetcode.cn/problems/find-median-from-data-stream/description/">295. 数据流的中位数 - 力扣（LeetCode）</a></p></li></ul><h2 id="6-图"><a href="#6-图" class="headerlink" title="6. 图"></a>6. 图</h2><h3 id="6-1-邻接表"><a href="#6-1-邻接表" class="headerlink" title="6.1 邻接表"></a>6.1 邻接表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 邻接表表示法</span><br><span class="line">graph = &#123;</span><br><span class="line">    &#x27;A&#x27;: [&#x27;B&#x27;, &#x27;C&#x27;],</span><br><span class="line">    &#x27;B&#x27;: [&#x27;D&#x27;],</span><br><span class="line">    &#x27;C&#x27;: [&#x27;E&#x27;],</span><br><span class="line">    &#x27;D&#x27;: [],</span><br><span class="line">    &#x27;E&#x27;: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># DFS遍历</span><br><span class="line">def dfs(graph, node, visited):</span><br><span class="line">    if node not in visited:</span><br><span class="line">        print(node)</span><br><span class="line">        visited.add(node)</span><br><span class="line">        for neighbor in graph[node]:</span><br><span class="line">            dfs(graph, neighbor, visited)</span><br></pre></td></tr></table></figure><h3 id="6-2-并查集"><a href="#6-2-并查集" class="headerlink" title="6.2 并查集"></a>6.2 并查集</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class UnionFind:</span><br><span class="line">    def __init__(self, n):</span><br><span class="line">        self.parent = list(range(n))  # 初始化：每个节点的父节点是它自己</span><br><span class="line">        self.rank = [1] * n  # 初始化：每个集合的秩为 1</span><br><span class="line"></span><br><span class="line">    def find(self, x):</span><br><span class="line">        if self.parent[x] != x:</span><br><span class="line">            self.parent[x] = self.find(self.parent[x])  # 路径压缩</span><br><span class="line">        return self.parent[x]</span><br><span class="line"></span><br><span class="line">    def union(self, x, y):</span><br><span class="line">        root_x = self.find(x)</span><br><span class="line">        root_y = self.find(y)</span><br><span class="line">        if root_x != root_y:</span><br><span class="line">            if self.rank[root_x] &gt; self.rank[root_y]:</span><br><span class="line">                self.parent[root_y] = root_x</span><br><span class="line">            elif self.rank[root_x] &lt; self.rank[root_y]:</span><br><span class="line">                self.parent[root_x] = root_y</span><br><span class="line">            else:</span><br><span class="line">                self.parent[root_x] = root_y</span><br><span class="line">                self.rank[root_y] += 1</span><br><span class="line"></span><br><span class="line">    def is_connected(self, x, y):</span><br><span class="line">        return self.find(x) == self.find(y)</span><br></pre></td></tr></table></figure><h2 id="7-跳表"><a href="#7-跳表" class="headerlink" title="7. 跳表"></a>7. 跳表</h2><p><a href="https://leetcode.cn/problems/design-skiplist/description/">1206. 设计跳表 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 基础不牢，地动山摇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2025/02/25/MySQL/"/>
      <url>/2025/02/25/MySQL/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> MySQL锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发理论与实践[Python]</title>
      <link href="/2025/02/19/%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-Python/"/>
      <url>/2025/02/19/%E5%B9%B6%E5%8F%91%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E8%B7%B5-Python/</url>
      
        <content type="html"><![CDATA[<h2 id="1-并发与并行"><a href="#1-并发与并行" class="headerlink" title="1. 并发与并行"></a>1. 并发与并行</h2><p>并发（Concurrency）：指多个任务在同一时间段内交替执行，从宏观上看像是“同时”进行，但实际上是通过快速切换任务来实现的，例如有两个任务，task1正在被cpu调度，task2尽管没有被调度，但在进行I&#x2F;O操作，这两个任务是并发进行的。</p><p>并行（Parallelism）：指多个任务在同一时刻真正同时执行，需要多核CPU的支持，被不同CPU核心调度。</p><h3 id="1-1-进程、线程与协程"><a href="#1-1-进程、线程与协程" class="headerlink" title="1.1 进程、线程与协程"></a>1.1 进程、线程与协程</h3><ul><li><p><strong>进程</strong>：操作系统资源分配的基本单位，拥有独立的内存空间。</p><ul><li>程序、数据、进程控制块PCB（堆栈）</li></ul></li><li><p><strong>线程</strong>：操作系统调度的基本单位，共享进程的内存空间。</p><ul><li><strong>新建（New）</strong>：线程刚被创建。</li><li><strong>就绪（Runnable）</strong>：线程等待CPU调度。</li><li><strong>运行（Running）</strong>：线程正在执行。</li><li><strong>阻塞（Blocked）</strong>：线程等待I&#x2F;O操作或其他资源。</li><li><strong>终止（Terminated）</strong>：线程执行完毕。</li></ul></li><li><p><strong>协程</strong>：用户态的轻量级线程，由程序控制调度，无需操作系统介入。</p></li></ul><h3 id="1-2-I-O密集型-vs-CPU密集型"><a href="#1-2-I-O密集型-vs-CPU密集型" class="headerlink" title="1.2 I&#x2F;O密集型 vs CPU密集型"></a>1.2 I&#x2F;O密集型 vs CPU密集型</h3><ul><li><strong>I&#x2F;O密集型</strong>：任务主要时间花在I&#x2F;O操作上，如网络请求、文件读写。</li><li><strong>CPU密集型</strong>：任务主要时间花在CPU计算上，如数学运算、图像处理。</li></ul><h3 id="1-3-Python线程与Java线程的区别"><a href="#1-3-Python线程与Java线程的区别" class="headerlink" title="1.3 Python线程与Java线程的区别"></a>1.3 Python线程与Java线程的区别</h3><ul><li><strong>Python</strong>：<ul><li>有GIL全局互斥锁，线程由调度由解释器协作式切换，线程在执行Python字节码前必须获取GIL，执行完成后释放GIL，因GIL存在，多线无法利用多核CPU的并行能力。</li><li>I&#x2F;O密集型任务可通过多线程+异步I&#x2F;O绕过GIL限制。</li></ul></li><li><strong>Java</strong>：<ul><li>线程直接由操作系统调度，支持真正的多核并行</li></ul></li></ul><h3 id="1-4-Linux的线程、进程调度"><a href="#1-4-Linux的线程、进程调度" class="headerlink" title="1.4 Linux的线程、进程调度"></a>1.4 Linux的线程、进程调度</h3><blockquote><p>O (1) 调度器（2.5 - 2.6.23 内核版本）, 维护队列数组，每个队列数组包含 140 个优先级队列，对应 140 个不同的优先级，活动队列（active queue）和过期队列（expired queue），通过位图快速查找非空优先级队列</p><p>CFS（2.6.23 内核版本至今），红黑树</p></blockquote><p>Linux 操作系统<strong>普通任务</strong>（<strong>实时任务</strong>通过<strong>实时调度器</strong>调度）默认通过**完全公平调度器(CFS)**管理进程和线程的调度，确保每个任务都能获得合理的运行机会，避免因任务优先级差异或运行时间过长导致的饿死现象，从而提高系统的整体响应性和公平性。</p><p><strong>核心机制</strong>：</p><ol><li><strong>虚拟运行时间：</strong><br>vruntime 是任务已获得的 CPU 时间经过优先级加权后的值。调度器通过选择 vruntime 最小的任务来执行，确保运行时间较少的任务优先获得 CPU 时间，从而实现公平调度。</li><li><strong>红黑树</strong>：<br>所有可运行任务按 vruntime 排序存储在红黑树中，保证快速查找 vruntime 最小的任务。红黑树的自平衡特性使得插入、删除和查找操作的效率很高，为调度器的高效运行提供了支持。</li><li><strong>动态时间片</strong>：<br>根据系统中任务的数量和优先级动态分配时间片。任务数量越多，时间片越小，保证每个任务都能更频繁地获得 CPU 时间；任务优先级越高，时间片越长，但其 vruntime 增长得更慢，进一步确保公平性。</li></ol><h4 id="1-4-1-线程-轻量级进程-LWP"><a href="#1-4-1-线程-轻量级进程-LWP" class="headerlink" title="1.4.1 线程-&gt;轻量级进程 LWP"></a>1.4.1 线程-&gt;轻量级进程 LWP</h4><p>在 Linux 中，线程被视为<strong>轻量级进程（Lightweight Process, LWP）</strong>，与<strong>进程</strong>一视同仁，均由<code>task_struct</code>描述的，只不过对于LWP而言，同一线程组的线程共享内存管理、文件系统相关的描述符。</p><p>task_struct简化定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">struct task_struct &#123;</span><br><span class="line">    // 进程/线程标识</span><br><span class="line">    pid_t pid;              // 进程 ID</span><br><span class="line">    pid_t tgid;             // 线程组 ID（进程 ID）</span><br><span class="line">    pid_t ppid;             // 父进程 ID</span><br><span class="line">    uid_t uid;              // 用户 ID</span><br><span class="line">    gid_t gid;              // 组 ID</span><br><span class="line"></span><br><span class="line">    // 调度信息</span><br><span class="line">    int prio;               // 动态优先级</span><br><span class="line">    int static_prio;        // 静态优先级</span><br><span class="line">    u64 vruntime;           // 虚拟运行时间</span><br><span class="line">    struct sched_entity se; // 调度实体</span><br><span class="line"></span><br><span class="line">    // 内存管理</span><br><span class="line">    struct mm_struct *mm;   // 内存描述符</span><br><span class="line">    pgd_t *pgd;             // 页表</span><br><span class="line"></span><br><span class="line">    // 文件系统</span><br><span class="line">    struct files_struct *files; // 文件描述符表</span><br><span class="line">    struct fs_struct *fs;       // 文件系统信息</span><br><span class="line"></span><br><span class="line">    // 信号处理</span><br><span class="line">    struct signal_struct *signal; // 信号处理函数</span><br><span class="line">    sigset_t blocked;             // 信号掩码</span><br><span class="line">    struct sigpending pending;    // 挂起信号</span><br><span class="line"></span><br><span class="line">    // 进程状态</span><br><span class="line">    volatile long state;    // 进程状态</span><br><span class="line">    int exit_code;          // 退出状态码</span><br><span class="line"></span><br><span class="line">    // 上下文信息</span><br><span class="line">    struct pt_regs *regs;   // CPU 寄存器</span><br><span class="line">    unsigned long sp;       // 栈指针</span><br><span class="line"></span><br><span class="line">    // 资源使用</span><br><span class="line">    u64 utime;              // 用户态 CPU 时间</span><br><span class="line">    u64 stime;              // 内核态 CPU 时间</span><br><span class="line">    unsigned long rss;      // 物理内存使用</span><br><span class="line"></span><br><span class="line">    // 线程信息</span><br><span class="line">    struct list_head thread_group; // 线程组</span><br><span class="line">    struct thread_struct thread;   // 线程局部存储</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="1-4-2-从task-struct看为什么LWP上下文切换开销小？"><a href="#1-4-2-从task-struct看为什么LWP上下文切换开销小？" class="headerlink" title="1.4.2 从task_struct看为什么LWP上下文切换开销小？"></a>1.4.2 从<code>task_struct</code>看为什么LWP上下文切换开销小？</h4><ul><li><p><strong>关键字段</strong>：<code>mm_struct *mm</code>（内存描述符）、<code>pgd_t *pgd</code>（页表）。<br>同一进程下的所有线程共享相同的地址空间（即共享<code>mm</code>和<code>pgd</code>）。在上下文切换时：</p><ul><li><strong>进程切换</strong>：需要切换<code>mm</code>和<code>pgd</code>，这会触发<strong>页表切换</strong>和<strong>TLB刷新</strong>，导致显著的性能开销。</li><li><strong>线程切换</strong>：无需切换<code>mm</code>和<code>pgd</code>，避免了上述操作，减少了内存管理相关的开销。</li></ul></li><li><p><strong>关键字段</strong>：<code>files_struct *files</code>（文件描述符表）、<code>fs_struct *fs</code>（文件系统信息）。<br>同一进程的线程共享文件描述符表和文件系统上下文（如当前工作目录、根目录等）。线程切换时：</p><ul><li><strong>进程切换</strong>：需要切换<code>files</code>和<code>fs</code>，涉及文件描述符表的更新和文件系统状态的重新加载。</li><li><strong>线程切换</strong>：无需切换这些资源，减少了文件系统相关的开销。</li></ul></li></ul><h4 id="1-4-3-调度队列与状态转换"><a href="#1-4-3-调度队列与状态转换" class="headerlink" title="1.4.3 调度队列与状态转换"></a>1.4.3 调度队列与状态转换</h4><ul><li><strong>运行队列（Runqueue）</strong>：存储所有<strong>可运行状态</strong>的进程。每个CPU核心都有一个独立的运行队列。</li><li><strong>阻塞队列</strong>：因I&#x2F;O或资源等待被阻塞的进程&#x2F;线程，当事件完成时移回就绪队列。</li><li><strong>状态迁移</strong>：<ul><li>就绪 → 运行：被调度器选中，分配CPU时间片。</li><li>运行 → 就绪：时间片用完或被更高优先级任务抢占。</li><li>运行 → 阻塞：主动等待资源（如I&#x2F;O操作）。</li><li>阻塞 → 就绪：等待的资源就绪。</li></ul></li></ul><h2 id="2-ThreadPoolExecutor并发"><a href="#2-ThreadPoolExecutor并发" class="headerlink" title="2. ThreadPoolExecutor并发"></a>2. ThreadPoolExecutor并发</h2><h3 id="2-1-工作模式"><a href="#2-1-工作模式" class="headerlink" title="2.1 工作模式"></a>2.1 工作模式</h3><ul><li><strong>任务队列</strong>：线程池维护一个任务队列，线程从队列中获取任务执行。</li><li><strong>线程切换</strong>：操作系统负责线程的调度和切换</li></ul><h3 id="2-2-submit-提交任务"><a href="#2-2-submit-提交任务" class="headerlink" title="2.2 submit 提交任务"></a>2.2 submit 提交任务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cpu_task():</span><br><span class="line">    while True:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def io_task(i):</span><br><span class="line">    print(f&quot;线程任务 &#123;i&#125; 开始执行&quot;)</span><br><span class="line">    time.sleep(1)  # 模拟 1 秒的 I/O 等待时间</span><br><span class="line">    print(f&quot;线程任务 &#123;i&#125; 执行完毕&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_executor = ThreadPoolExecutor(max_workers=10)</span><br><span class="line">start = time.time()</span><br><span class="line">io_futures = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    future = thread_executor.submit(io_task, i)</span><br><span class="line">    io_futures.append(future)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 等待所有 I/O 密集型任务完成</span><br><span class="line">    for future in io_futures:</span><br><span class="line">        future.result()</span><br><span class="line">    print(&quot;用时&quot;, time.time() - start)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;执行任务时发生异常: &#123;e&#125;&quot;)</span><br><span class="line">finally:</span><br><span class="line">    # 关闭线程池，不再接受新的任务</span><br><span class="line">    thread_executor.shutdown()</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">线程任务 0 开始执行</span><br><span class="line">线程任务 1 开始执行</span><br><span class="line">线程任务 2 开始执行</span><br><span class="line">线程任务 3 开始执行</span><br><span class="line">线程任务 4 开始执行</span><br><span class="line">线程任务 5 开始执行</span><br><span class="line">线程任务 6 开始执行</span><br><span class="line">线程任务 7 开始执行</span><br><span class="line">线程任务 8 开始执行</span><br><span class="line">线程任务 9 开始执行</span><br><span class="line">线程任务 5 执行完毕线程任务 1 执行完毕</span><br><span class="line">线程任务 6 执行完毕</span><br><span class="line">线程任务 4 执行完毕</span><br><span class="line">线程任务 3 执行完毕线程任务 9 执行完毕</span><br><span class="line">线程任务 0 执行完毕线程任务 8 执行完毕线程任务 7 执行完毕</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线程任务 2 执行完毕</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用时 1.013387680053711</span><br></pre></td></tr></table></figure><p>print不是线程安全的，输出结果有些混乱</p><h3 id="2-3-add-done-callback回调"><a href="#2-3-add-done-callback回调" class="headerlink" title="2.3 add_done_callback回调"></a>2.3 add_done_callback回调</h3><p>回调函数需要有一个参数接受future对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def callback(future):</span><br><span class="line">    try:</span><br><span class="line">        result = future.result()</span><br><span class="line">        print(f&quot;任务完成，结果: &#123;result&#125;&quot;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;任务失败，异常: &#123;e&#125;&quot;)</span><br><span class="line"></span><br><span class="line">for i in range(10):</span><br><span class="line">    future = thread_executor.submit(io_task, i)</span><br><span class="line">    future.add_done_callback(callback)</span><br></pre></td></tr></table></figure><h3 id="2-4-超时控制"><a href="#2-4-超时控制" class="headerlink" title="2.4 超时控制"></a>2.4 超时控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    result = future.result(timeout=1)  # 设置超时时间为1秒</span><br><span class="line">    print(f&quot;任务完成，结果: &#123;result&#125;&quot;)</span><br><span class="line">except TimeoutError:</span><br><span class="line">    print(&quot;任务超时&quot;)</span><br></pre></td></tr></table></figure><h2 id="3-asyncio并发"><a href="#3-asyncio并发" class="headerlink" title="3. asyncio并发"></a>3. asyncio并发</h2><h3 id="3-1-工作模式"><a href="#3-1-工作模式" class="headerlink" title="3.1 工作模式"></a>3.1 工作模式</h3><p>事件循环是<code>asyncio</code>的核心，它是一个无限循环，用于管理和调度异步任务。</p><ul><li><p><strong>就绪队列</strong>：事件循环维护一个就绪队列，存储可以立即执行的任务。</p></li><li><p><strong>等待队列</strong>：当任务遇到 <code>await</code> 时，会被移到等待队列，并注册一个回调函数。</p></li><li><p><strong>I&#x2F;O 多路复用</strong>：事件循环使用操作系统提供的 I&#x2F;O 多路复用机制（如 <code>select</code>、<code>epoll</code>、<code>kqueue</code>）监听 I&#x2F;O 事件。</p></li><li><p><strong>回调机制</strong>：当 I&#x2F;O 操作完成时，事件循环会调用注册的回调函数，将任务重新加入就绪队列。</p></li></ul><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><ul><li><strong>协程</strong>：在 Python 中，使用<code>async</code>和<code>await</code>关键字来定义协程。<code>async</code>关键字用于定义一个协程函数，而<code>await</code>关键字用于暂停协程的执行，等待一个异步操作完成。</li><li><strong>任务</strong>：是对协程的进一步封装，它用于在事件循环中调度和执行协程。可以使用<code>asyncio.create_task()</code>函数将一个协程包装成一个任务，并将其添加到事件循环中。任务可以用来并发地执行多个协程，并且可以方便地获取协程的执行结果、处理异常等。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line"></span><br><span class="line">async def my_coroutine():</span><br><span class="line">    print(&quot;开始执行协程&quot;)</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    print(&quot;协程执行结束&quot;)</span><br><span class="line">    return &quot;结果&quot;</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    task = asyncio.create_task(my_coroutine())</span><br><span class="line">    result = await task</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">开始执行协程</span><br><span class="line">协程执行结束</span><br><span class="line">结果</span><br></pre></td></tr></table></figure><p>使用<code>asyncio.gather</code>同时运行多个协程</p><p>是否使用gather的对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def task1():</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    return &quot;Result from task1&quot;</span><br><span class="line"></span><br><span class="line">async def task2():</span><br><span class="line">    await asyncio.sleep(2)</span><br><span class="line">    return &quot;Result from task2&quot;</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    start = time.time()</span><br><span class="line">    await task1()</span><br><span class="line">    await task2()</span><br><span class="line">    print(&quot;耗时&quot;, time.time() - start)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">耗时 3.0184578895568848</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def task1():</span><br><span class="line">    await asyncio.sleep(1)</span><br><span class="line">    return &quot;Result from task1&quot;</span><br><span class="line"></span><br><span class="line">async def task2():</span><br><span class="line">    await asyncio.sleep(2)</span><br><span class="line">    return &quot;Result from task2&quot;</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    start = time.time()</span><br><span class="line">    results = await asyncio.gather(task1(), task2())</span><br><span class="line">    print(&quot;耗时&quot;, time.time() - start)</span><br><span class="line">    for result in results:</span><br><span class="line">        print(f&quot;Handling result: &#123;result&#125;&quot;)</span><br><span class="line"></span><br><span class="line">asyncio.run(main())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">耗时 2.0149099826812744</span><br><span class="line">Handling result: Result from task1</span><br><span class="line">Handling result: Result from task2</span><br></pre></td></tr></table></figure><h3 id="3-3-超时控制"><a href="#3-3-超时控制" class="headerlink" title="3.3 超时控制"></a>3.3 超时控制</h3><blockquote><p>Python3.8之后协程对象要先封装成tasks，再传给asyncio.wait()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from tensorflow.python.data.experimental.ops.testing import sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义一个异步的 I/O 密集型任务函数</span><br><span class="line">async def io_task(i):</span><br><span class="line">    print(f&quot;协程任务 &#123;i&#125; 开始执行&quot;)</span><br><span class="line">    await asyncio.sleep(2)  # 模拟 1 秒的 I/O 等待时间</span><br><span class="line">    print(f&quot;协程任务 &#123;i&#125; 执行完毕&quot;)</span><br><span class="line">    return i  # 返回任务编号</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    start = time.time()</span><br><span class="line">    tasks = [asyncio.create_task(io_task(i)) for i in range(10)]  # 创建 10 个任务</span><br><span class="line"></span><br><span class="line">    # 使用 asyncio.wait 设置超时时间为 1.5 秒</span><br><span class="line">    done, pending = await asyncio.wait(tasks, timeout=1.5)</span><br><span class="line"></span><br><span class="line">    # 输出已完成和未完成的任务</span><br><span class="line">    print(f&quot;已完成的任务数量: &#123;len(done)&#125;&quot;)</span><br><span class="line">    print(f&quot;未完成的任务数量: &#123;len(pending)&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    # 取消未完成的任务</span><br><span class="line">    for task in pending:</span><br><span class="line">        task.cancel()</span><br><span class="line"></span><br><span class="line">    print(&quot;用时&quot;, time.time() - start)</span><br><span class="line">    # sleep(1)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h3 id="3-4-10000线程vs10000协程简单性能对比"><a href="#3-4-10000线程vs10000协程简单性能对比" class="headerlink" title="3.4 10000线程vs10000协程简单性能对比"></a>3.4 10000线程vs10000协程简单性能对比</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cpu_task():</span><br><span class="line">    while True:</span><br><span class="line">        continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def io_task(i):</span><br><span class="line">    time.sleep(1)  # 模拟 1 秒的 I/O 等待时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_executor = ThreadPoolExecutor(max_workers=10000)</span><br><span class="line">start = time.time()</span><br><span class="line">io_futures = []</span><br><span class="line">for i in range(10000):</span><br><span class="line">    future = thread_executor.submit(io_task, i)</span><br><span class="line">    io_futures.append(future)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    # 等待所有 I/O 密集型任务完成</span><br><span class="line">    for future in io_futures:</span><br><span class="line">        future.result()</span><br><span class="line">    print(&quot;用时&quot;, time.time() - start)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(f&quot;执行任务时发生异常: &#123;e&#125;&quot;)</span><br><span class="line">finally:</span><br><span class="line">    # 关闭线程池，不再接受新的任务</span><br><span class="line">    thread_executor.shutdown()</span><br><span class="line"></span><br><span class="line">用时 3.834956645965576</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def io_task(i):</span><br><span class="line">    await asyncio.sleep(1)  # 模拟1秒的I/O等待时间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    start = time.time()</span><br><span class="line">    tasks = [io_task(i) for i in range(10000)]  # 创建10000个协程任务</span><br><span class="line">    await asyncio.gather(*tasks)  # 等待所有任务完成</span><br><span class="line">    print(&quot;用时&quot;, time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    </span><br><span class="line">用时 1.2120013236999512</span><br></pre></td></tr></table></figure><h2 id="4-Linux相关命令"><a href="#4-Linux相关命令" class="headerlink" title="4. Linux相关命令"></a>4. Linux相关命令</h2><h3 id="4-1-CPU-物理核心数-逻辑核心数量"><a href="#4-1-CPU-物理核心数-逻辑核心数量" class="headerlink" title="4.1 CPU - 物理核心数 - 逻辑核心数量"></a>4.1 CPU - 物理核心数 - 逻辑核心数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lscpu</span><br></pre></td></tr></table></figure><p><img src="C:\Users\forwork\AppData\Roaming\Typora\typora-user-images\image-20250225203331897.png" alt="image-20250225203331897"></p><p>2个28核CPU，超线程技术，每个物理核心2个逻辑核心</p><hr><h3 id="4-2-ps命令"><a href="#4-2-ps命令" class="headerlink" title="4.2 ps命令"></a>4.2 ps命令</h3><p>查看手册</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man ps </span><br></pre></td></tr></table></figure><p><img src="C:\Users\forwork\AppData\Roaming\Typora\typora-user-images\image-20250225204011847.png" alt="image-20250225204011847"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><ul><li><strong><code>ps</code></strong>：表示“Process Status”，用于显示系统中运行的进程信息。</li><li><strong><code>a</code></strong>：显示所有终端上的进程（包括其他用户的进程）。</li><li><strong><code>u</code></strong>：显示进程的用户（所有者）信息。</li><li><strong><code>x</code></strong>：显示没有控制终端的进程（例如后台服务）。</li></ul><p><img src="C:\Users\forwork\AppData\Roaming\Typora\typora-user-images\image-20250225205135745.png" alt="image-20250225205135745"></p><hr><h3 id="4-3-top命令"><a href="#4-3-top命令" class="headerlink" title="4.3 top命令"></a>4.3 top命令</h3><p>实时显示系统中各个进程资源占用情况</p><ul><li><strong><code>RES</code></strong>：进程占用的物理内存大小（Resident Set Size），单位为KiB。表示进程实际占用的物理内存</li><li><code>Shift + M</code> 按<code>RES</code>降序排列</li></ul><p><img src="C:\Users\forwork\AppData\Roaming\Typora\typora-user-images\image-20250225204600312.png" alt="image-20250225204600312"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>o(1)调度器 <a href="https://www.bilibili.com/video/BV1juzZYhEG2/?spm_id_from=333.337.search-card.all.click&vd_source=c56989756bcbf59bc426f870d11aff0c">Linux如何调度进程？大学老师不讲的，看完动画秒懂！_哔哩哔哩_bilibili</a></p><p>Linux ps命令<a href="https://www.bilibili.com/video/BV1dK411G7Hc?spm_id_from=333.788.videopod.episodes&vd_source=c56989756bcbf59bc426f870d11aff0c&p=4">04 进程优先级及nice_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/weixin_45910027/article/details/130526456">CPU相关概念：物理cpu数、核数、逻辑cpu数，12核20线程实例分析-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python高级语法</title>
      <link href="/2025/02/16/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
      <url>/2025/02/16/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-装饰器-Decorators"><a href="#1-装饰器-Decorators" class="headerlink" title="1. 装饰器 (Decorators)"></a>1. 装饰器 (Decorators)</h2><p>装饰器的本质是一个接受函数作为参数并返回新函数的<strong>高阶函数</strong>。</p><p>能够在不修改原始函数代码的情况下，动态地增加函数的功能。</p><h3 id="1-1-简单样例"><a href="#1-1-简单样例" class="headerlink" title="1.1 简单样例"></a>1.1 简单样例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        print(&quot;Before function call&quot;)</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        print(&quot;After function call&quot;)</span><br><span class="line">        return result</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def greet(name):</span><br><span class="line">    print(f&quot;Hello, &#123;name&#125;&quot;)</span><br><span class="line"></span><br><span class="line">greet(&quot;Alice&quot;)</span><br></pre></td></tr></table></figure><h3 id="1-2-带参数的装饰器"><a href="#1-2-带参数的装饰器" class="headerlink" title="1.2 带参数的装饰器"></a>1.2 带参数的装饰器</h3><p>若装饰器需要接受参数，需再嵌套一层函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def repeat(n):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            for _ in range(n):</span><br><span class="line">                result = func(*args, **kwargs)</span><br><span class="line">            return result</span><br><span class="line">        return wrapper</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@repeat(3)</span><br><span class="line">def say_hello():</span><br><span class="line">    print(&quot;Hello!&quot;)</span><br><span class="line"></span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Hello!</span><br><span class="line">Hello!</span><br><span class="line">Hello!</span><br></pre></td></tr></table></figure><h3 id="1-3-类装饰器"><a href="#1-3-类装饰器" class="headerlink" title="1.3 类装饰器"></a>1.3 类装饰器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class CounterDecorator:</span><br><span class="line">    def __init__(self, func):</span><br><span class="line">        self.func = func</span><br><span class="line">        self.count = 0</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        self.count += 1</span><br><span class="line">        print(f&quot;&#123;self.func.__name__&#125; 已被调用 &#123;self.count&#125; 次&quot;)</span><br><span class="line">        return self.func(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">@CounterDecorator</span><br><span class="line">def example():</span><br><span class="line">    print(&quot;执行函数&quot;)</span><br><span class="line"></span><br><span class="line">example()  </span><br><span class="line">example()  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">example 已被调用 1 次</span><br><span class="line">执行函数</span><br><span class="line">example 已被调用 2 次</span><br><span class="line">执行函数</span><br></pre></td></tr></table></figure><h3 id="1-4-保留函数元数据"><a href="#1-4-保留函数元数据" class="headerlink" title="1.4 保留函数元数据"></a>1.4 保留函数元数据</h3><p>使用装饰器对函数进行包装的本质是：<strong>被装饰的函数会被替换为装饰器内部的wrapper函数</strong></p><p>wrapper函数会<strong>丢失原函数的元数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def a_decorator(func):</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span><br><span class="line">        # Extend some capabilities of func</span><br><span class="line">        func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@a_decorator</span><br><span class="line">def first_function():</span><br><span class="line">    &quot;&quot;&quot;This is docstring for first function&quot;&quot;&quot;</span><br><span class="line">    print(&quot;first function&quot;)</span><br><span class="line"></span><br><span class="line">@a_decorator</span><br><span class="line">def second_function(a):</span><br><span class="line">    &quot;&quot;&quot;This is docstring for second function&quot;&quot;&quot;</span><br><span class="line">    print(&quot;second function&quot;)</span><br><span class="line"></span><br><span class="line">print(first_function.__name__)</span><br><span class="line">print(first_function.__doc__)</span><br><span class="line">print(second_function.__name__)</span><br><span class="line">print(second_function.__doc__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wrapper</span><br><span class="line">A wrapper function</span><br><span class="line">wrapper</span><br><span class="line">A wrapper function</span><br></pre></td></tr></table></figure><p>使用<code>functools.wrap</code>保留函数元数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line"></span><br><span class="line">def a_decorator(func):</span><br><span class="line">    @functools.wraps(func)</span><br><span class="line">    def wrapper(*args, **kwargs):</span><br><span class="line">        &quot;&quot;&quot;A wrapper function&quot;&quot;&quot;</span><br><span class="line">        # Extend some capabilities of func</span><br><span class="line">        func()</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@a_decorator</span><br><span class="line">def first_function():</span><br><span class="line">    &quot;&quot;&quot;This is docstring for first function&quot;&quot;&quot;</span><br><span class="line">    print(&quot;first function&quot;)</span><br><span class="line"></span><br><span class="line">@a_decorator</span><br><span class="line">def second_function(a):</span><br><span class="line">    &quot;&quot;&quot;This is docstring for second function&quot;&quot;&quot;</span><br><span class="line">    print(&quot;second function&quot;)</span><br><span class="line"></span><br><span class="line">print(first_function.__name__)</span><br><span class="line">print(first_function.__doc__)</span><br><span class="line">print(second_function.__name__)</span><br><span class="line">print(second_function.__doc__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">first_function</span><br><span class="line">This is docstring for first function</span><br><span class="line">second_function</span><br><span class="line">This is docstring for second function</span><br></pre></td></tr></table></figure><h3 id="1-4-常用Decorators"><a href="#1-4-常用Decorators" class="headerlink" title="1.4 常用Decorators"></a>1.4 常用Decorators</h3><h4 id="1-4-1-property"><a href="#1-4-1-property" class="headerlink" title="1.4.1 @property"></a>1.4.1 @property</h4><p><code>@property</code>会将一个方法转换为属性，实现面向对象的属性封装和验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Circle:</span><br><span class="line">    def __init__(self, radius):</span><br><span class="line">        self._radius = radius</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def radius(self):</span><br><span class="line">        return self._radius</span><br><span class="line"></span><br><span class="line">    @radius.setter</span><br><span class="line">    def radius(self, value):</span><br><span class="line">        if value &lt; 0:</span><br><span class="line">            raise ValueError(&quot;半径不能为负数&quot;)</span><br><span class="line">        self._radius = value</span><br><span class="line"></span><br><span class="line">c = Circle(5)</span><br><span class="line">print(c.radius)  # 5 (直接访问属性)</span><br><span class="line">c.radius = 10    # 调用 setter 方法</span><br><span class="line">c.radius = -1    # 抛出 ValueError</span><br></pre></td></tr></table></figure><h4 id="1-4-2-staticmethod-与-classmethod"><a href="#1-4-2-staticmethod-与-classmethod" class="headerlink" title="1.4.2 @staticmethod 与 @classmethod"></a>1.4.2 @staticmethod 与 @classmethod</h4><p>类方法和静态方法是 Python 中用于类的函数，区别在于类方法的第一个参数是类对象<code>cls</code>，而静态方法则与类和实例没有直接关联。</p><ul><li>类方法用于操作类级别的数据（如工厂方法）。</li><li>静态方法用于与类的状态无关的功能（如数学运算、数据处理）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class MyClass:</span><br><span class="line">    cnt = 0</span><br><span class="line">    @classmethod</span><br><span class="line">    def class_method(cls):</span><br><span class="line">        print(f&quot;Class method called: &#123;cls.cnt&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def static_method():</span><br><span class="line">        print(f&quot;Static method called: &#123;MyClass.cnt&#125;&quot;)</span><br><span class="line"></span><br><span class="line">MyClass.class_method()</span><br><span class="line">MyClass.static_method()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class method called: 0</span><br><span class="line">Static method called: 0</span><br></pre></td></tr></table></figure><h4 id="1-4-3-functools-lru-cache"><a href="#1-4-3-functools-lru-cache" class="headerlink" title="1.4.3 @functools.lru_cache"></a>1.4.3 @functools.lru_cache</h4><p><code>lru_cache</code> 装饰器可以用来为一个函数添加一个缓存，存储函数的输入和对应的输出。如果函数被调用，并且给出了已经缓存过的输入，那么函数就不会被调用，而是直接从缓存中获取对应的输出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import functools</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># @functools.lru_cache(maxsize=None)  # 使用缓存，maxsize=None 表示无限制缓存大小</span><br><span class="line">def fibonacci(n):</span><br><span class="line">    if n &lt; 0:</span><br><span class="line">        raise ValueError(&quot;Input must be a non-negative integer.&quot;)</span><br><span class="line">    elif n == 0:</span><br><span class="line">        return 0</span><br><span class="line">    elif n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return fibonacci(n - 1) + fibonacci(n - 2)</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">fibonacci(30)</span><br><span class="line">end1 = time.time()</span><br><span class="line">print(end1 - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0.32143115997314453</span><br><span class="line">去掉注释 0.0</span><br></pre></td></tr></table></figure><h2 id="2-生成器-Generators"><a href="#2-生成器-Generators" class="headerlink" title="2. 生成器 (Generators)"></a>2. 生成器 (Generators)</h2><p>生成器是一种特殊的迭代器，它通过函数实现。与普通函数不同，生成器函数每次执行到 <code>yield</code> 时，函数会暂停执行，返回一个值，并在下次调用时从上次暂停的位置继续执行。</p><ul><li>大量数据的惰性加载</li><li>网络数据的流式返回，如AI问答的流式返回</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">def count_up_to(max):</span><br><span class="line">    count = 1</span><br><span class="line">    while count &lt;= max:</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        yield count</span><br><span class="line">        count += 1</span><br><span class="line"></span><br><span class="line">gen = count_up_to(5)</span><br><span class="line">print(gen)</span><br><span class="line">for num in gen:</span><br><span class="line">    print(time.perf_counter())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&lt;generator object count_up_to at 0x0000022260E6DA50&gt;</span><br><span class="line">1.1235322</span><br><span class="line">2.125579</span><br><span class="line">3.1393956</span><br><span class="line">4.1479524</span><br><span class="line">5.1612428</span><br></pre></td></tr></table></figure><h2 id="3-上下文管理器-Context-Managers"><a href="#3-上下文管理器-Context-Managers" class="headerlink" title="3. 上下文管理器 (Context Managers)"></a>3. 上下文管理器 (Context Managers)</h2><p>上下文管理器（Context Manager）是一种用于管理资源（如文件、网络连接、锁等）的机制，确保资源在使用后能够正确地被清理或释放。上下文管理器的核心是 <code>with</code> 语句，它提供了一种优雅的方式来处理资源的获取和释放，而无需手动管理资源的生命周期。</p><h3 id="3-1-工作原理"><a href="#3-1-工作原理" class="headerlink" title="3.1 工作原理"></a>3.1 工作原理</h3><p>上下文管理器的核心是 <code>with</code> 语句。<code>with</code> 语句会自动调用上下文管理器的两个特殊方法：</p><ul><li><code>__enter__()</code>：在进入上下文时被调用，用于初始化资源。</li><li><code>__exit__()</code>：在退出上下文时被调用，用于清理资源。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class MyContextManager:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        print(&quot;Entering the context&quot;)</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_value, traceback):</span><br><span class="line">        print(&quot;Exiting the context&quot;)</span><br><span class="line">        if exc_type:</span><br><span class="line">            print(f&quot;exc_type=&#123;exc_type&#125;, exc_value=&#123;exc_value&#125;, traceback=&#123;traceback&#125;&quot;)</span><br><span class="line">            return True # 不抛出异常</span><br><span class="line"></span><br><span class="line">with MyContextManager() as cm:</span><br><span class="line">    print(1/0)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">Entering the context</span><br><span class="line">Exiting the context</span><br><span class="line">exc_type=&lt;class &#x27;ZeroDivisionError&#x27;&gt;, exc_value=division by zero, traceback=&lt;traceback object at 0x000001BBECDCA5C0&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-内置上下文管理器"><a href="#3-2-内置上下文管理器" class="headerlink" title="3.2 内置上下文管理器"></a>3.2 内置上下文管理器</h3><h4 id="3-2-1-文件"><a href="#3-2-1-文件" class="headerlink" title="3.2.1 文件"></a>3.2.1 文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文件在退出上下文时自动关闭</span><br><span class="line">with open(&quot;example.txt&quot;, &quot;w&quot;) as file:</span><br><span class="line">    file.write(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><h4 id="3-2-2-线程锁"><a href="#3-2-2-线程锁" class="headerlink" title="3.2.2 线程锁"></a>3.2.2 线程锁</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line">with lock:</span><br><span class="line">    print(&quot;Critical section&quot;)</span><br></pre></td></tr></table></figure><h2 id="4-函数式编程-Functional-Programming"><a href="#4-函数式编程-Functional-Programming" class="headerlink" title="4. 函数式编程 (Functional Programming)"></a>4. 函数式编程 (Functional Programming)</h2><p>函数式编程的核心思想是将程序分解为一系列纯函数（pure functions），并通过函数组合来实现复杂的逻辑。Python支持函数式编程特性，如 <code>map</code>、<code>filter</code>、<code>reduce</code> 和匿名函数（<code>lambda</code>）。</p><h3 id="4-1-lambda"><a href="#4-1-lambda" class="headerlink" title="4.1 lambda"></a>4.1 lambda</h3><p>创建匿名函数，通常用于简化代码。</p><blockquote><p> lambda arguments: expression</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 按字符串长度排序</span><br><span class="line">words = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;]</span><br><span class="line">sorted_words = sorted(words, key=lambda x: len(x))</span><br><span class="line">print(sorted_words)  # 输出: [&#x27;date&#x27;, &#x27;apple&#x27;, &#x27;cherry&#x27;, &#x27;banana&#x27;]</span><br></pre></td></tr></table></figure><h3 id="4-2-map"><a href="#4-2-map" class="headerlink" title="4.2 map"></a>4.2 map</h3><p>将一个函数应用于一个或多个可迭代对象的所有元素，并返回一个<em><strong>惰性迭代器</strong></em>。</p><blockquote><p>map(function, iterable, …)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">numbers = [1, 2, 3, 4, 5]</span><br><span class="line">squared = map(lambda x: x**2, numbers)</span><br><span class="line">print(squared)</span><br><span class="line"></span><br><span class="line">&lt;map object at 0x0000023BEF4E5910&gt;</span><br></pre></td></tr></table></figure><h3 id="4-3-reduce"><a href="#4-3-reduce" class="headerlink" title="4.3 reduce"></a>4.3 reduce</h3><p><code>reduce</code> 用于将一个二元函数（接受两个参数的函数）累积地应用于一个可迭代对象的所有元素，从而将整个序列“折叠”成一个单一的结果。</p><blockquote><p>在 Python 3 中，<code>reduce</code>不再是内置函数，而是被移到了 <code>functools</code> 模块中。因此，使用 <code>reduce</code> 时需要先导入 <code>functools</code> 模块。</p></blockquote><blockquote><p> reduce(function, iterable[, initializer])</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">numbers = [1, 2, 3, 4, 5]</span><br><span class="line">result = reduce(lambda x, y: x + y, numbers)</span><br><span class="line">print(result)  </span><br><span class="line"></span><br><span class="line">15</span><br></pre></td></tr></table></figure><h3 id="4-4-filter"><a href="#4-4-filter" class="headerlink" title="4.4 filter"></a>4.4 filter</h3><p>用于从可迭代对象中筛选出满足特定条件的元素。</p><p>工作原理是将一个布尔函数应用于可迭代对象的每个元素，然后返回一个<em><strong>惰性迭代器</strong></em>，其中包含所有使布尔函数返回 <code>True</code> 的元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numbers = [1, 2, 3, 4, 5]</span><br><span class="line">result = filter(lambda x: x &amp; 1 == 0, numbers)</span><br><span class="line">print(result)</span><br><span class="line">print(list(result))</span><br><span class="line"></span><br><span class="line">&lt;filter object at 0x00000121065F5910&gt;</span><br><span class="line">[2, 4]</span><br></pre></td></tr></table></figure><h2 id="5-解包"><a href="#5-解包" class="headerlink" title="5. 解包"></a>5. 解包</h2><p>解包（Unpacking）是一种非常强大且灵活的特性，将可迭代对象（如列表、元组、字典等）中的元素分配给多个变量</p><p>使用 <code>*</code> 和 <code>**</code> 将可迭代对象解包为函数的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b, c):</span><br><span class="line">    return a + b + c</span><br><span class="line"></span><br><span class="line"># 使用 * 解包列表</span><br><span class="line">data = [1, 2, 3]</span><br><span class="line">result = add(*data)</span><br><span class="line">print(result)  # 输出: 6</span><br><span class="line"></span><br><span class="line"># 使用 ** 解包字典</span><br><span class="line">config = &#123;&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: 3&#125;</span><br><span class="line">result = add(**config)</span><br><span class="line">print(result)  # 输出: 6</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.geeksforgeeks.org/python-functools-wraps-function/">Python | functools.wraps() function - GeeksforGeeks</a></p><p><a href="https://liaoxuefeng.com/books/python/functional/higher-order-function/map-reduce/index.html">map&#x2F;reduce - Python教程 - 廖雪峰的官方网站</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装饰器 </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logging实践</title>
      <link href="/2025/02/11/logging%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/02/11/logging%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基础概念"><a href="#1-基础概念" class="headerlink" title="1. 基础概念"></a>1. 基础概念</h2><h3 id="1-1-logging-模块的作用"><a href="#1-1-logging-模块的作用" class="headerlink" title="1.1 logging 模块的作用"></a>1.1 <code>logging</code> 模块的作用</h3><p><code>logging</code> 模块用于为应用程序提供灵活的日志记录功能；</p><p>特点：通过threading locks 实现thread-safe，提到了threading lock 不全是可重入的*（TODO锁）*</p><h3 id="1-2-logging-的基本组件"><a href="#1-2-logging-的基本组件" class="headerlink" title="1.2 logging 的基本组件"></a>1.2 <code>logging</code> 的基本组件</h3><ul><li><strong>Logger</strong>: 负责记录日志消息，通常在应用程序的不同部分使用不同的 Logger 对象来进行日志记录。</li><li><strong>Handler</strong>: 负责将日志消息输出到指定的目标。常见的 Handler 包括 <code>StreamHandler</code>、<code>FileHandler</code> 等。<ul><li><code>FileHandler</code> 将消息发送到磁盘文件</li><li><code>StreamHandler </code>消息发送到流</li><li><code>RotatingFileHandler</code> 发送到磁盘文件，支持最大日志文件大小和日志文件旋转</li></ul></li><li><strong>Formatter</strong>: 负责格式化日志消息，定义了日志的输出格式<ul><li>时间%(asctime)s、函数名%(funcName)s、日志信息%(message)s等</li></ul></li><li><strong>Filter</strong>: 用于在日志处理过程中筛选特定的日志记录。它可以限制哪些日志消息应该被处理或者输出。</li></ul><ol><li><code>Logger</code> 以<code>Formatter</code>的形式生成一条<code>Record</code></li><li><code>Filter</code> 在消息被输出之前筛选。</li><li><code>Handler</code> 通过不同的输出方式处理这些日志消息。</li></ol><h3 id="1-3-logging-的五个日志级别"><a href="#1-3-logging-的五个日志级别" class="headerlink" title="1.3 logging 的五个日志级别"></a>1.3 <code>logging</code> 的五个日志级别</h3><p>Python <code>logging</code> 模块提供了五个标准的日志级别，它们用于表示日志消息的重要性和紧急性：</p><ul><li><strong>DEBUG</strong>: 用于输出详细的调试信息，通常仅在开发过程中使用。</li><li><strong>INFO</strong>: 用于输出常规的运行信息，标志程序的正常执行。</li><li><strong>WARNING</strong>: 用于输出警告信息，标志某些不影响程序运行的问题。</li><li><strong>ERROR</strong>: 用于输出错误信息，通常表示某些功能失败。</li><li><strong>CRITICAL</strong>: 用于输出严重错误信息，通常表示程序无法继续运行。</li></ul><p>每个日志级别都可以输出该级别及更高级别的日志。例如，设置为 <code>WARNING</code> 级别时，将同时输出 <code>WARNING</code>、<code>ERROR</code> 和 <code>CRITICAL</code> 级别的日志。</p><hr><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h2><h3 id="2-1-Logger"><a href="#2-1-Logger" class="headerlink" title="2.1 Logger"></a>2.1 Logger</h3><p><code>Logger</code> 是日志系统的核心组件，用于记录日志消息。每个 <code>Logger</code> 都有一个名称，并且可以通过层级关系继承父级 <code>Logger</code> 的配置。<code>Logger</code> 的主要功能包括：</p><ul><li>设置日志级别（如 <code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code> 等）。</li><li>添加一个或多个 <code>Handler</code>，用于将日志消息输出到不同的目标。</li><li>可以通过 <code>extra</code> 参数传递自定义字段。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;example&quot;</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 设置日志级别</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个 Handler（如 StreamHandler）</span></span><br><span class="line">handler = logging.StreamHandler()</span><br><span class="line">logger.addHandler(handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试日志</span></span><br><span class="line">logger.debug(<span class="string">&quot;This is a debug message&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;This is an info message&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;This is a warning message&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;This is an error message&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;This is a critical message&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-Handler"><a href="#2-2-Handler" class="headerlink" title="2.2 Handler"></a>2.2 Handler</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from logging.handlers import RotatingFileHandler</span><br><span class="line"></span><br><span class="line"># 创建一个 RotatingFileHandler</span><br><span class="line">file_handler = RotatingFileHandler(</span><br><span class="line">    &quot;example.log&quot;, maxBytes=1024 * 1024 * 5, backupCount=5</span><br><span class="line">)</span><br><span class="line">logger.addHandler(file_handler)</span><br></pre></td></tr></table></figure><h3 id="2-3-Formater"><a href="#2-3-Formater" class="headerlink" title="2.3 Formater"></a>2.3 Formater</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">formatter = logging.Formatter(</span><br><span class="line">    fmt=&quot;%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(message)s&quot;,</span><br><span class="line">    datefmt=&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">)</span><br><span class="line">handler.setFormatter(formatter)</span><br></pre></td></tr></table></figure><p>自定义字段进行传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line"># 创建一个 Formatter，包含自定义字段</span><br><span class="line">formatter = logging.Formatter(</span><br><span class="line">    fmt=&quot;%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(custom_field)s - %(message)s&quot;,</span><br><span class="line">    datefmt=&quot;%Y-%m-%d %H:%M:%S&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 创建一个 Logger</span><br><span class="line">logger = logging.getLogger(&quot;example&quot;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"># 定义一个函数，用于生成日志</span><br><span class="line">def log_something():</span><br><span class="line">    # 使用 extra 参数传递自定义字段</span><br><span class="line">    extra_data = &#123;&quot;custom_field&quot;: &quot;This is a custom field&quot;&#125;</span><br><span class="line">    logger.info(&quot;This is an info message&quot;, extra=extra_data)</span><br><span class="line"></span><br><span class="line">log_something()</span><br></pre></td></tr></table></figure><h3 id="2-4-Filter"><a href="#2-4-Filter" class="headerlink" title="2.4 Filter"></a>2.4 Filter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">class LevelFilter(logging.Filter):</span><br><span class="line">    def __init__(self, level):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.level = level</span><br><span class="line"></span><br><span class="line">    def filter(self, record):</span><br><span class="line">        return record.levelno == self.level</span><br><span class="line"></span><br><span class="line">info_filter = LevelFilter(logging.INFO)</span><br><span class="line">handler.addFilter(info_filter)</span><br></pre></td></tr></table></figure><hr><h2 id="3-实践场景：gunicorn部署的Flask应用使用logging"><a href="#3-实践场景：gunicorn部署的Flask应用使用logging" class="headerlink" title="3. 实践场景：gunicorn部署的Flask应用使用logging"></a>3. 实践场景：gunicorn部署的Flask应用使用logging</h2><p>需求：</p><ol><li>gunicorn部署，多进程写入同一个文件而非创建不同文件</li><li>日志自动翻转，翻转后的日志采取日期命名，支持滚动删除</li><li>日志记录funcName与request_id</li></ol><p>多进程日志库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install ConcurrentLogHandler==0.9.1</span><br></pre></td></tr></table></figure><h3 id="3-1-重写handler"><a href="#3-1-重写handler" class="headerlink" title="3.1 重写handler"></a>3.1 重写handler</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from concurrent_log_handler import ConcurrentRotatingFileHandler</span><br><span class="line">from typing import List</span><br><span class="line"></span><br><span class="line">class CustomConcurrentRotatingFileHandler(ConcurrentRotatingFileHandler):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    自定义日志处理器，继承 ConcurrentRotatingFileHandler，</span><br><span class="line">    增加自动命名日志文件及清理旧日志文件的功能。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, *args, **kwargs):</span><br><span class="line">        super().__init__(*args, **kwargs)  # 直接继承父类的所有参数</span><br><span class="line">        self.dir_folder = os.path.dirname(self.baseFilename)</span><br><span class="line">        self.default_filename = os.path.splitext(os.path.basename(self.baseFilename))[0]</span><br><span class="line">        self.back_up_file_format = f&quot;&#123;self.default_filename&#125;-*.log&quot;</span><br><span class="line"></span><br><span class="line">    def doRollover(self):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        执行日志轮转，将当前日志文件重命名为带有时间戳的新文件，</span><br><span class="line">        并删除超出 backupCount 限制的最旧备份文件。</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        if self.stream:</span><br><span class="line">            self.stream.close()</span><br><span class="line">            self.stream = None</span><br><span class="line"></span><br><span class="line">        # 生成新的备份日志文件名：/folder/OnlineServer-YYYYMMDD_HHMMSS.log</span><br><span class="line">        current_time = time.strftime(&quot;%Y%m%d_%H%M%S&quot;)</span><br><span class="line">        dfn = self.rotation_filename(os.path.join(self.dir_folder, f&quot;&#123;self.default_filename&#125;-&#123;current_time&#125;.log&quot;))</span><br><span class="line"></span><br><span class="line">        if os.path.exists(dfn):</span><br><span class="line">            os.remove(dfn)</span><br><span class="line">        self.rotate(self.baseFilename, dfn)</span><br><span class="line"></span><br><span class="line">        if not self.delay:</span><br><span class="line">            self.stream = self._open()</span><br><span class="line"></span><br><span class="line">        # 清理旧日志文件</span><br><span class="line">        if self.backupCount &gt; 0:</span><br><span class="line">            for file in self.getFilesToDelete():</span><br><span class="line">                os.remove(file)</span><br><span class="line"></span><br><span class="line">    def getFilesToDelete(self) -&gt; List[str]:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        获取需要删除的旧日志文件</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        log_files = [f for f in os.listdir(self.dir_folder) if re.match(self.back_up_file_format.replace(&#x27;*&#x27;, &#x27;.*&#x27;), f)]</span><br><span class="line">        log_files = [os.path.join(self.dir_folder, f) for f in log_files]</span><br><span class="line"></span><br><span class="line">        if len(log_files) &lt;= self.backupCount:</span><br><span class="line">            return []</span><br><span class="line"></span><br><span class="line">        log_files.sort()</span><br><span class="line">        return log_files[: len(log_files) - self.backupCount]</span><br></pre></td></tr></table></figure><h3 id="3-2-配置多进程logger"><a href="#3-2-配置多进程logger" class="headerlink" title="3.2 配置多进程logger"></a>3.2 配置多进程logger</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">from flask import g, has_request_context</span><br><span class="line">from kernel.logging.handler import CustomConcurrentRotatingFileHandler</span><br><span class="line">from config.consts import LOG_BASE_DIR, LOG_BASE_NAME, LOG_FILE_SIZE, LOG_BACK_UP_NUM, LOG_MYSQL_NAME, LOG_REDIS_NAME, \</span><br><span class="line">    LOG_NOS_NAME, LOG_SPLIT_NAME</span><br><span class="line"></span><br><span class="line"># 文件单例，多进程共用一个logger</span><br><span class="line">os.makedirs(LOG_BASE_DIR, exist_ok=True)</span><br><span class="line">logger = logging.getLogger(&#x27;logger&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自定义 Filter 来添加 request_id, 用于追踪与request_id相关的日志条目</span><br><span class="line">class RequestIDFilter(logging.Filter):</span><br><span class="line">    def filter(self, record):</span><br><span class="line">        if has_request_context():</span><br><span class="line">            # 在请求上下文中安全获取 request_id</span><br><span class="line">            record.request_id = getattr(g, &#x27;request_id&#x27;, &#x27;no-request-id&#x27;)</span><br><span class="line">        else:</span><br><span class="line">            # 如果没有请求上下文，尝试从日志记录的 extra 参数中获取 request_id</span><br><span class="line">            # 假设在记录日志时通过 extra=&#123;&#x27;request_id&#x27;: &#x27;some-id&#x27;&#125; 传递了 request_id</span><br><span class="line">            record.request_id = getattr(record, &#x27;request_id&#x27;, &#x27;non-request-id&#x27;)</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def setup_loggers():</span><br><span class="line">    # logger使用自定义日志处理器，将日志写入 .log 文件中，</span><br><span class="line">    # 当文件达到 LOG_FILE_SIZE MB 时进行轮转，最多保留 K 个备份</span><br><span class="line">    log_handler = CustomConcurrentRotatingFileHandler(</span><br><span class="line">        os.path.join(LOG_BASE_DIR, LOG_BASE_NAME), &quot;a&quot;,</span><br><span class="line">        LOG_FILE_SIZE * 1024 * 1024, LOG_BACK_UP_NUM, encoding=&#x27;utf-8&#x27;)</span><br><span class="line">    log_formatter = logging.Formatter(</span><br><span class="line">        f&#x27;%(asctime)s - %(name)s - %(levelname)s - %(request_id)s - %(funcName)s - %(message)s&#x27;)</span><br><span class="line">    log_handler.setFormatter(log_formatter)</span><br><span class="line">    logger.addHandler(log_handler)</span><br><span class="line">    logger.setLevel(logging.INFO)</span><br><span class="line">    logger.addFilter(RequestIDFilter())</span><br><span class="line">    logger.propagate = False</span><br><span class="line"></span><br><span class="line">setup_loggers()</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://docs.python.org/3/library/logging.html">logging — Logging facility for Python — Python 3.13.2 documentation</a></p><p><a href="https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial">https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> 工程改造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基础用法</title>
      <link href="/2025/02/10/hexo%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/"/>
      <url>/2025/02/10/hexo%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1. 目录结构"></a>1. 目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my-blog/</span><br><span class="line">├── _config.yml       # 站点配置文件</span><br><span class="line">├── package.json      # 项目依赖配置文件</span><br><span class="line">├── scaffolds/        # 模板文件夹</span><br><span class="line">├── source/           # 资源文件夹（文章、图片等）</span><br><span class="line">│   └── _posts/       # 文章存放目录</span><br><span class="line">└── themes/           # 主题文件夹</span><br></pre></td></tr></table></figure><h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new &lt;title&gt;创建新文章</span><br><span class="line">hexo generate生成静态文件</span><br><span class="line">hexo server启动本地服务器</span><br><span class="line">hexo deploy部署博客</span><br><span class="line">hexo clean清理缓存和生成的文件</span><br></pre></td></tr></table></figure><h2 id="3-修改默认模板"><a href="#3-修改默认模板" class="headerlink" title="3. 修改默认模板"></a>3. 修改默认模板</h2><h3 id="3-1-打开模板文件"><a href="#3-1-打开模板文件" class="headerlink" title="3.1 打开模板文件"></a>3.1 打开模板文件</h3><p>进入 Hexo 项目目录，找到 <code>scaffolds</code> 文件夹，打开 <code>post.md</code> 文件。</p><h3 id="3-2-修改模板内容"><a href="#3-2-修改模板内容" class="headerlink" title="3.2 修改模板内容"></a>3.2 修改模板内容</h3><p>默认的 <code>post.md</code> 文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>更改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">  - 默认标签</span><br><span class="line">categories:</span><br><span class="line">  - 默认分类</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 静态博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
